#version 150

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[4];
uniform float useFakeLighting;
uniform float numberOfRows;
uniform vec2 offset;
uniform vec4 plane;

in vec3 position;
in vec2 textureCoordinates;
in vec3 normal;

out vec2 pass_textureCoordinates;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;


void main(void)
{
	vec4 wPos = transformationMatrix * vec4(position,1.0);	
	gl_ClipDistance[0] = dot(wPos, plane);	
	vec4 pRel2Cam = viewMatrix * wPos;
	gl_Position = projectionMatrix * pRel2Cam;
	pass_textureCoordinates = (textureCoordinates/numberOfRows) + offset;
	
	vec3 actualNormal = normal;
	if(useFakeLighting == 1)
	{
		actualNormal = vec3(0.0,1.0,0.0);
	}
	
	surfaceNormal = (transformationMatrix * vec4(actualNormal,0.0)).xyz;
	for(int i=0;i<4;i++)
	{
		toLightVector[i] = lightPosition[i] - wPos.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - wPos.xyz;
	
	visibility = clamp(exp(-pow((length(pRel2Cam.xyz)*0),5.0)),0.0,1.0);	
}