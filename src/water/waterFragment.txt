#version 140

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColour;
uniform float moveFactor;

in vec4 cSpace;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_Color;

void main(void)
{
	float near = 0.1;
	float far = 1000.0;

	vec2 abx = (cSpace.xy/cSpace.w)/2.0 + 0.5;
	vec2 refrTexCoords = vec2(abx.x, abx.y);
	vec2 reflTexCoords = vec2(abx.x, -abx.y);	
	float depth = texture(depthMap, refrTexCoords).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));	
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));	
	float waterDepth = floorDistance - 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));	
	
	vec2 distTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distTexCoords = textureCoords + vec2(distTexCoords.x, distTexCoords.y+moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distTexCoords).rg * 2.0 - 1.0) * 0.04 * clamp(waterDepth/20.0, 0.0, 1.0);
	
	refrTexCoords = clamp(refrTexCoords+totalDistortion, 0.001, 0.999);
	
	reflTexCoords += totalDistortion;
	reflTexCoords.x = clamp(reflTexCoords.x, 0.001, 0.999);
	reflTexCoords.y = clamp(reflTexCoords.y, -0.999, -0.001);
	
	vec4 rColor = texture(reflectionTexture, reflTexCoords);
	vec4 refractColour = texture(refractionTexture, refrTexCoords);
	
	vec4 nMapColor = texture(normalMap, distTexCoords);
	vec3 normal = vec3(nMapColor.r * 2.0 - 1.0, nMapColor.b*3.0, nMapColor.g * 2.0 - 1.0);
	normal = normalize(normal);
	
	vec3 viewVector = normalize(toCameraVector);
	float rFactor = dot(viewVector, normal);
	rFactor = pow(rFactor, 0.5);
	rFactor = clamp(rFactor, 0.0, 1.0);
	
	vec3 rLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(rLight, viewVector), 0.0);
	specular = pow(specular, 30.0);
	vec3 specularHighlights = lightColour * specular * 0.75 * clamp(waterDepth/5.0, 0.0, 1.0);

	out_Color = mix(mix(rColor, refractColour, rFactor), vec4(0.0, 0.3, 0.5, 1.0), 0.2) + vec4(specularHighlights, 0.0);
	out_Color.a = clamp(waterDepth/5.0, 0.0, 1.0);

	
}