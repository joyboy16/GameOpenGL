#version 150

uniform sampler2D modelTexture;
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform vec3 skyColour;

in vec3 toLightVector[4];
in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

void main(void){
	vec3 uNorm = normalize(surfaceNormal);
	vec3 uVec2Cam = normalize(toCameraVector);
	
	vec3 tDiffuse = vec3(0.0);
	vec3 tSpecular = vec3(0.0);
	
	for(int i=0;i<4;i++)
	{
		float d = length(toLightVector[i]);
		vec3 uLightVec = normalize(toLightVector[i]);
		float specularFactor = dot(reflect(-uLightVec,uNorm) , uVec2Cam);
		specularFactor = max(specularFactor,0.0);
		
		float attFactor = attenuation[i].x + (attenuation[i].y * d) + (attenuation[i].z * d * d);
		tDiffuse = tDiffuse + (max(dot(uNorm,uLightVec),0.0) * lightColour[i])/attFactor;
		tSpecular = tSpecular + (pow(specularFactor,shineDamper) * reflectivity * lightColour[i])/attFactor;
	}
	tDiffuse = max(tDiffuse, 0.2);
	
	vec4 textureColour = texture(modelTexture,pass_textureCoordinates);
	if(textureColour.a<0.5)
	{
		discard;
	}

	out_Color = mix(vec4(skyColour,1.0),vec4(tDiffuse,1.0) * textureColour + vec4(tSpecular,1.0), visibility);
}